name: CI/CD Django

on:
  push:
    branches:
      - ci-cd
  pull_request:

env:
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  CONTAINER_NAME: sp-hakaton-backend-1
  SQL_DUMP_LOCATION: "/tmp/backups/sql-backup.sql.gz"
  BRANCH: ci-cd
  PROJECT_DIR: /home/ubuntu/hakaton/SP-Hakaton

jobs:
  lint-python:
    name: Python Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install black
        working-directory: ./backend

      - name: Run black (autoformat)
        run: black .
        working-directory: ./backend

  lint-js:
    name: JavaScript Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install ESLint v8 and create config
        run: |
          npm install eslint@8 --save-dev
          echo '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "parserOptions": { "ecmaVersion": 12, "sourceType": "module" },
            "rules": {}
          }' > .eslintrc.json
        working-directory: ./frontend

      - name: Run ESLint (auto fix)
        run: npx eslint . --ext .js,.jsx --fix || true
        working-directory: ./frontend

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint-python, lint-js]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-cd'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST << EOF
            echo 'Creating SQL dump...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py dumpdata --output=$SQL_DUMP_LOCATION

            echo 'Pulling latest code...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git pull origin $BRANCH

            echo 'Installing dependencies...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME pip install -r requirements.txt

            echo 'Applying migrations...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py migrate

            echo 'Collecting static files...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py collectstatic --noinput
          EOF

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Rollback code and database
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST << EOF
            echo 'Rolling back code...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git fetch
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git checkout ${{ github.event.before }}

            echo 'Reinstalling dependencies...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME pip install -r requirements.txt

            echo 'Restoring database from backup...'
            docker exec -i $CONTAINER_NAME sh -c "gunzip -c $SQL_DUMP_LOCATION | psql -U <db_user> <db_name>"

            echo 'Collecting static files...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py collectstatic --noinput
          EOF
