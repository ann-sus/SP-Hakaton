name: CI/CD Django

on:
  push:
    branches:
      - ci-cd
  pull_request:

env:
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  CONTAINER_NAME: sp-hakaton-backend-1
  BRANCH: ci-cd
  PROJECT_DIR: /app

  # Шляхи на сервері (локальні, поза контейнером)
  BACKUP_DIR: /app/backups
  DAILY_BACKUP_DIR: /app/backups/daily
  BACKUP_RETENTION_DAYS: 7

  # Дані для БД
  DB_USER: postgres
  DB_NAME: app_db

jobs:
  lint-python:
    name: Python Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install black
        working-directory: ./backend

      - name: Run black (autoformat)
        run: black .
        working-directory: ./backend

  lint-js:
    name: JavaScript Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install ESLint v8 and create config
        run: |
          npm install eslint@8 --save-dev
          echo '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "parserOptions": { "ecmaVersion": 12, "sourceType": "module" },
            "rules": {}
          }' > .eslintrc.json
        working-directory: ./frontend

      - name: Run ESLint (auto fix)
        run: npx eslint . --ext .js,.jsx --fix || true
        working-directory: ./frontend

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint-python, lint-js]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-cd'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST << EOF
            set -e

            BACKUP_FILE="backup-\$(date +'%Y-%m-%d').sql.gz"
            BACKUP_PATH="$DAILY_BACKUP_DIR/\$BACKUP_FILE"

            echo 'Створення SQL дампу...'
            docker exec $CONTAINER_NAME pg_dump -U $DB_USER $DB_NAME | gzip > "\$BACKUP_PATH"

            echo 'Оновлення символічного посилання latest.sql.gz...'
            ln -sf "\$BACKUP_PATH" $BACKUP_DIR/latest.sql.gz

            echo "Видалення бекапів старших за $BACKUP_RETENTION_DAYS днів..."
            find $DAILY_BACKUP_DIR -type f -name "*.sql.gz" -mtime +$BACKUP_RETENTION_DAYS -exec rm -f {} \;

            echo 'Оновлення коду...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git pull origin $BRANCH

            echo 'Встановлення залежностей...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME pip install -r requirements.txt

            echo 'Застосування міграцій...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py migrate

            echo 'Збір статичних файлів...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py collectstatic --noinput
          EOF

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Rollback code and database
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST << EOF
            set -e

            echo 'Відкат коду...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git fetch
            docker exec -w $PROJECT_DIR $CONTAINER_NAME git checkout ${{ github.event.before }}

            echo 'Встановлення залежностей...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME pip install -r requirements.txt

            echo 'Відновлення бази даних з бекапу...'
            docker exec -i $CONTAINER_NAME sh -c "gunzip -c $BACKUP_DIR/latest.sql.gz | psql -U $DB_USER $DB_NAME"

            echo 'Збір статичних файлів...'
            docker exec -w $PROJECT_DIR $CONTAINER_NAME python manage.py collectstatic --noinput
          EOF
